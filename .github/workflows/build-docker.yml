name: Build Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: v86-alpine-image
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false  # Only build locally, do not push to any registry
        load: true   # Load image into local Docker daemon for export
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/386
    
    - name: Create container and export to tar
      run: |
        # Set variables similar to build.sh
        IMAGE_NAME="${{ steps.meta.outputs.tags }}"
        CONTAINER_NAME="alpine-v86-export"
        OUT_ROOTFS_TAR="alpine-rootfs.tar"
        
        # Use the first tag from the metadata output
        IMAGE_TAG=$(echo "$IMAGE_NAME" | head -n1)
        echo "Using image tag: $IMAGE_TAG"
        
        # Create container from the built image
        docker create --platform linux/386 -t -i --name "$CONTAINER_NAME" "$IMAGE_TAG"
        
        # Export container to tar file
        docker export "$CONTAINER_NAME" -o "$OUT_ROOTFS_TAR"
        
        # Remove .dockerenv file (same as build.sh)
        tar -f "$OUT_ROOTFS_TAR" --delete ".dockerenv" || true
        
        # Clean up container
        docker rm "$CONTAINER_NAME"
        
        # Show results
        ls -lh "$OUT_ROOTFS_TAR"
        echo "Docker image exported to $OUT_ROOTFS_TAR successfully!"
    
    - name: Create FSJSON and ROOTFS_FLAT
      run: |
        # Set output paths (same as build.sh)
        OUT_ROOTFS_TAR="alpine-rootfs.tar"
        OUT_FSJSON="alpine-fs.json"
        OUT_ROOTFS_FLAT="alpine-rootfs-flat"
        
        # Create FSJSON using fs2json.py tool
        python3 tools/fs2json.py --out "$OUT_FSJSON" "$OUT_ROOTFS_TAR"
        
        # Create ROOTFS_FLAT directory using copy-to-sha256.py tool
        mkdir -p "$OUT_ROOTFS_FLAT"
        python3 tools/copy-to-sha256.py "$OUT_ROOTFS_TAR" "$OUT_ROOTFS_FLAT"
        
        # Show results
        echo "Created files:"
        ls -lh "$OUT_ROOTFS_TAR" "$OUT_FSJSON"
        echo "Created directory:"
        ls -lah "$OUT_ROOTFS_FLAT" | head -10
        echo "FSJSON and ROOTFS_FLAT created successfully!"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.21.0'
    
    - name: Install dependencies
      run: |
        npm install
    
    - name: Prepare images directory and generate state
      run: |
        # Create images directory structure that build-state.js expects
        mkdir -p images
        
        # Copy our generated files to the expected locations
        cp alpine-rootfs.tar images/alpine-rootfs.tar
        cp alpine-fs.json images/alpine-fs.json
        cp -r alpine-rootfs-flat images/alpine-rootfs-flat
        
        # Run our custom build-state script that uses V86 from npm
        node tools/build-state.js
        
        echo "Generated alpine-state.bin successfully!"
        ls -lh images/alpine-state.bin
    
    - name: Verify images directory
      run: |
        echo "V86 images directory contents:"
        tree images/ || ls -la images/
    
    - name: Upload Alpine rootfs tar (intermediate file)
      uses: actions/upload-artifact@v4
      with:
        name: alpine-rootfs-tar
        path: alpine-rootfs.tar
        retention-days: 30
    
    - name: Upload V86 images directory
      uses: actions/upload-artifact@v4
      with:
        name: v86-images
        path: images
        retention-days: 30
